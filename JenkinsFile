pipeline {
    agent any
    
    environment {
        DOCKER_COMPOSE_VERSION = '2.20.0'
        COMPOSE_PROJECT_NAME = 'myapp'
        APP_DIR = '/app'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out code...'
                checkout scm
            }
        }
        
        stage('Setup Environment') {
            steps {
                echo 'Setting up environment variables...'
                script {
                    env.EXTERNAL_IP = sh(script: 'curl -s ifconfig.me', returnStdout: true).trim()
                    echo "External IP: ${env.EXTERNAL_IP}"
                }
            }
        }
        
        stage('Prepare Environment Files') {
            steps {
                echo 'Preparing .env files...'
                script {
                    sh '''
                        #!/bin/bash
                        # Create env files in server directory
                        cd server
                        touch .env.dev .env.prod
                        cp ${APP_DIR}/.env.dev .env.dev
                        cp ${APP_DIR}/.env.prod .env.prod
                        
                        sed -i '/^ALLOWED_ORIGINS=/s|localhost|'${EXTERNAL_IP}'|g' .env.prod
                        sed -i '/^ALLOWED_ORIGINS=/s|localhost|'${EXTERNAL_IP}'|g' .env.dev
                        
                        echo "Environment files prepared with IP: ${EXTERNAL_IP}"
                        cat .env.prod
                    '''
                }
            }
        }
        
        stage('Build Frontend') {
            steps {
                echo 'Building Frontend Container...'
                script {
                    sh '''
                        cd frontend
                        docker build -f dockerfile -t frontend:${BUILD_NUMBER} .
                        docker tag frontend:${BUILD_NUMBER} frontend:latest
                    '''
                }
            }
        }
        
        stage('Build Server') {
            steps {
                echo 'Building Server Container...'
                script {
                    sh '''
                        cd server
                        docker build -f dockerfile -t backend:${BUILD_NUMBER} .
                        docker tag backend:${BUILD_NUMBER} backend:latest
                    '''
                }
            }
        }
        
        stage('Deploy with Docker Compose') {
            steps {
                echo 'Deploying services with Docker Compose...'
                script {
                    sh '''
                        # Check if docker compose is available
                        if docker compose version >/dev/null 2>&1; then
                            echo "Using docker compose (v2)"
                            docker compose down || true
                            docker compose up -d --build
                        elif command -v docker-compose >/dev/null 2>&1; then
                            echo "Using docker-compose (v1)"
                            docker-compose down || true
                            docker-compose up -d --build
                        else
                            echo "ERROR: Neither 'docker compose' nor 'docker-compose' found!"
                            echo "Installing docker-compose..."
                            sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                            sudo chmod +x /usr/local/bin/docker-compose
                            docker-compose --version
                            docker-compose down || true
                            docker-compose up -d --build
                        fi
                    '''
                }
            }
        }
        
        stage('Verify Deployment') {
            steps {
                echo 'Verifying deployment...'
                script {
                    sh '''
                        sleep 10
                        docker ps
                        echo "Checking if containers are running..."
                        docker ps | grep NODE-backend || echo "Backend not running!"
                        docker ps | grep NEXT-frontend || echo "Frontend not running!"
                    '''
                }
            }
        }
    }
    
    post {
        success {
            echo 'Pipeline completed successfully!'
            echo "Frontend: http://${env.EXTERNAL_IP}:3000"
            echo "Backend: http://${env.EXTERNAL_IP}:4040"
            script {
                sh '''
                    echo "Container Status:"
                    docker ps --filter "name=NODE-backend" --filter "name=NEXT-frontend"
                '''
            }
        }
        failure {
            echo 'Pipeline failed!'
            script {
                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                    sh '''
                        echo "Checking logs..."
                        if docker compose version >/dev/null 2>&1; then
                            docker compose logs --tail=100 || echo "No logs available"
                        elif command -v docker-compose >/dev/null 2>&1; then
                            docker-compose logs --tail=100 || echo "No logs available"
                        else
                            docker logs NODE-backend 2>&1 || echo "Backend logs not available"
                            docker logs NEXT-frontend 2>&1 || echo "Frontend logs not available"
                        fi
                    '''
                }
            }
        }
        always {
            echo 'Cleaning up unused Docker resources...'
            script {
                catchError(buildResult: 'SUCCESS', stageResult: 'SUCCESS') {
                    sh '''
                        docker system prune -f
                        docker images -f "dangling=true" -q | xargs -r docker rmi
                    '''
                }
            }
        }
    }
}